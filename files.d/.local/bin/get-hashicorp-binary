#!/usr/bin/env bash

set -euo pipefail

BIN_DIR=$HOME/.local/bin

readonly CACHE=$HOME/.cache/download

# https://www.hashicorp.com/blog/announcing-the-hashicorp-releases-api
readonly BASE_URL=https://api.releases.hashicorp.com/v1/releases

# https://learn.hashicorp.com/tutorials/terraform/verify-archive
#
# https://www.hashicorp.com/security
readonly PGP_KEY_ID=72D7468F
readonly PGP_KEY_URL=https://keybase.io/hashicorp/pgp_keys.asc
readonly PGP_OLD_KEYS=(348FFC4C)

usage() {
    echo USAGE:
    echo
    echo "$0 <repo> <version>"
    echo
    echo PARAMS:
    echo
    echo 'name      description            default'
    echo '----      -----------            -------'
    echo 'repo      binary to download     <none>'
    echo 'version   version to download    "latest"'
    echo
    echo EXAMPLES:
    echo
    echo '# Download the latest version of terraform'
    echo
    echo "\$ $0 terraform"
    echo
    echo '# Download packer 1.5.6'
    echo
    echo "\$ $0 packer 1.5.6"
}

get_latest_version() {
    local -r name=$1
    local url="$BASE_URL/$name/latest"

    curl -s "$url" \
    | jq -r '.version'
}

get_version_meta() {
    local -r name=$1
    local -r version=$2

    local -r meta_url="$BASE_URL/$name/$version"
    curl \
        --silent \
        --fail \
        --url "$meta_url"
}

import_pgp_key() {
    echo "Purging outdated PGP keys"
    for kid in "${PGP_OLD_KEYS[@]}"; do
        if gpg --list-key "$kid" &>/dev/null; then
            gpg --quiet \
                --delete-keys \
                "$kid"
        fi
    done

    echo "Ensuring latest key ($PGP_KEY_ID)"
    if ! gpg --quiet --list-key "$PGP_KEY_ID"; then
        local fname; fname=$(cache-get "$PGP_KEY_URL")
        gpg --import "$fname"
    fi
}

fetch() {
    local -r meta="$1"
    local -r filter="$2"

    local url
    url=$(jq -r "$filter" <<< "$meta")

    cache-get "$url"
}

install() {
    local -r name=$1
    local -r version=$2
    local -r dest=$3

    local -r basename="${name}-${version}"

    if [[ -s "$dest/$basename" && -x "$dest/$basename" ]]; then
        echo "Woohoo! $name $version is already installed"
        ln -sfv "$dest/$basename" "$dest/$name"
        return
    fi

    import_pgp_key

    local meta; meta=$(get_version_meta "$name" "$version")

    local sums sigs archive
    sums=$(fetch "$meta" ".url_shasums")

    sigs=$(fetch "$meta" ".url_shasums_signatures[] | select(. | test(\"$PGP_KEY_ID\") )")

    echo "Validating signatures"
    gpg --verify "$sigs" "$sums"


    echo "Downloading binary"
    archive=$(fetch "$meta" '.builds[]
                   | select(.arch == "amd64" and .os == "linux")
                   | .url')


    echo "Downloaded to $archive"

    echo "Validating $archive"
    pushd "$CACHE"
    sha256sum \
        --ignore-missing \
        --strict \
        --check \
        "$sums"
    popd


    echo "Installing..."

    local t; t=$(mktemp -d)
    pushd "$t"

    unzip -d . "$archive"
    mv -v "$name" "$dest/$basename"
    popd
    rm -rfv "$t"

    ln -sfv "./$basename" "$dest/$name"
}

main() {
    local -r name=${1:-}
    local version=${2:-latest}
    local -r dest=${3:-$BIN_DIR}

    if [[ -z $name ]]; then
        usage
        exit 1
    fi


    if [[ $version == latest ]]; then
        echo "Checking latest release of $name"
        version=$(get_latest_version "$name")
    fi

    echo "Installing $name version $version..."

    install "$name" "$version" "$dest"

    "$name" -v
}

main "$@"
