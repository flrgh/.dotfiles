#!/usr/bin/env bash

set -euo pipefail

source "$HOME/.config/github/helper-access-token"

readonly BASE_URL=https://api.github.com/


if command -v http &>/dev/null; then
    http() {
        command http \
            --ignore-stdin \
            --auth "${GITHUB_USER}:${GITHUB_TOKEN}" \
            --follow \
            --check-status \
            "${BASE_URL}$1"
    }
else
    http() {
        curl \
            --silent \
            --fail \
            --user "${GITHUB_USER}:${GITHUB_TOKEN}" \
            --header "Accept: application/vnd.github.v3+json" \
            --url "${BASE_URL}$1"
    }
fi


is-function() {
    [[ $(type -t "$1") = function ]]
}

is-gh-command() {
    is-function "cmd-$1"
}

cmd-get-release() {
    local -r repo=$1
    local -r release=$2

    http "repos/$repo/releases/$release"
}


cmd-get-latest-release() {
    local -r repo=$1

    cmd-get-release "$repo" latest
}


cmd-get-releases() {
    local -r repo=$1

    http "repos/$repo/releases"
}

cmd-get-release-names() {
    local -r repo=$1

    http "repos/$repo/releases" \
    | jq -r '.[].name'
}

cmd-get-latest-release-name() {
    local -r repo=$1
    cmd-get-latest-release "$repo" | jq -r '.name'
}

cmd-get-latest-release-tag() {
    local -r repo=$1
    cmd-get-latest-release "$repo" | jq -r '.tag_name'
}


cmd-get-tag() {
    local -r repo=$1
    local -r tag=$2
    http "repos/$repo/releases/tags/$tag"
}

cmd-get-tags() {
    local -r repo=$1
    http "repos/$repo/tags"
}

cmd-get-tag-names() {
    local -r repo=$1

    http "repos/$repo/tags" \
    | jq -r '.[].name'
}

cmd-get-latest-tag() {
    local -r repo=$1
    cmd-get-tags "$repo" | jq -r '.[0].name'
}

cmd-get() {
    local -r path=$1
    http "$path"
}

cmd-list-commands() {
    declare -F \
    | grep -o 'cmd-.*' \
    | cut -d- -f2- \
    | sort
}

cmd-usage() {
    printf "USAGE:\n  %s COMMAND [ARGS...]\n\n" "$0"
    printf "COMMANDS:\n"
    cmd-list-commands | while read -r c; do
        printf "  %s\n" "$c"
    done
}

cmd-generate-bash-completion() {
    cat << 'HERE'
_gh-helper-complete() {
    if (( ${#COMP_WORDS[@]} <= 2 )); then
        local commands; commands=$(gh-helper list-commands)
        local cur=${COMP_WORDS[$COMP_CWORD]}

        mapfile -t COMPREPLY \
            < <(compgen -W "$commands" -- "$cur")
    fi
}

complete -F _gh-helper-complete gh-helper
HERE
}


run() {
    local -r fn=cmd-$1
    shift

    "$fn" "$@"
}


main() {
    local -r command=$1
    shift

    if ! is-gh-command "$command"; then
        printf "Unknown command: %s\n\n" "$command" >&2
        cmd-usage >&2
        exit 1
    fi

    run "$command" "$@"
}



main "$@"
