#!/usr/bin/env bash

set -euo pipefail

readonly URL=https://api.github.com/repos/nvm-sh/nvm/releases/latest
readonly NVM_SOURCE=https://github.com/nvm-sh/nvm.git

readonly INSTALL_DIR=$HOME/.config/nvm

GIT_ARGS=(
    --git-dir "$INSTALL_DIR"/.git
)

TAG=$(gh-helper get-latest-release-tag nvm-sh/nvm)

if [[ -d $INSTALL_DIR/.git ]]; then
    echo "Updating nvm to $TAG"

    git \
        "${GIT_ARGS[@]}" \
        --work-tree "$INSTALL_DIR" \
        fetch origin tag "$TAG"

else
    echo "Installing nvm $TAG"

    mkdir -p "${INSTALL_DIR}"
    git init "${INSTALL_DIR}"
    git \
        "${GIT_ARGS[@]}" \
        remote add origin "$NVM_SOURCE"

    git \
        "${GIT_ARGS[@]}" \
        fetch origin tag "$TAG" \
        --depth=1

fi

GIT_ARGS+=(
    --work-tree "$INSTALL_DIR"
)

git \
    "${GIT_ARGS[@]}" \
    -c advice.detachedHead=false \
    checkout \
    -f \
    --quiet \
    "$TAG"

if [[ -n "$(git "${GIT_ARGS[@]}" show-ref refs/heads/master)" ]]; then
    if git "${GIT_ARGS[@]}" branch --quiet 2>/dev/null; then
        git \
            "${GIT_ARGS[@]}" \
            branch \
            --quiet \
            -D \
            master \
        >/dev/null 2>&1
    fi
fi

echo "Compressing and cleaning up git repository"
if git \
    "${GIT_ARGS[@]}" \
    reflog expire \
    --expire=now \
    --all \
    && \
git \
    "${GIT_ARGS[@]}" \
    gc \
    --auto \
    --aggressive \
    --prune=now
then
    :
else
    echo "Your version of git is out of date. Please update it!"
fi
