#!/usr/bin/env bash

set -euo pipefail

readonly DIR=${BASH_COMPLETION_USER_DIR:-"$XDG_DATA_HOME"/bash-completion}/completions
mkdir -p "$DIR"

TMP=$(mktemp -d)
readonly TMP

readonly DIFF=$TMP/.diff
readonly STDERR=$TMP/.stderr

declare -a FAILED=()
declare -a UPDATED=()
declare -a SKIPPED=()
declare -a UNCHANGED=()

filter-enabled() {
    return 0
}

if (( $# > 0 )); then
    declare -a FILTER=("$@")

    filter-enabled() {
        for check in "${FILTER[@]}"; do
            if [[ $check == "$1" ]]; then
                return 0
            fi
        done

        return 1
    }
fi

finish() {
    local ec=$?

    rm -rf "$TMP" || true

    echo "  Updated: ${UPDATED[*]}"
    echo "Unchanged: ${UNCHANGED[*]}"
    echo "  Skipped: ${SKIPPED[*]}"
    echo "   Failed: ${FAILED[*]}"

    if (( ${#FAILED[@]} > 0 )); then
        exit 1
    fi

    exit "$ec"
}

trap finish ERR EXIT

failed() {
    local -r bin=$1
    local -r msg=$2
    shift 2

    FAILED+=("$bin")

    echo "ERROR ($bin): $msg"

    if [[ -s $STDERR ]]; then
        echo "================== STDERR ======================"
        cat "$STDERR"
        echo "================================================"
    fi
}


should-generate() {
    local -r bin=$1

    if ! filter-enabled "$bin"; then
        SKIPPED+=("$bin")
        return 1
    fi

    if ! type -t "$bin" &>/dev/null; then
        SKIPPED+=("$bin")
        rm "$DIR/$bin" &>/dev/null || true
        return 1
    fi
}

update() {
    local -r bin=$1

    local -r tmp=$TMP/$bin
    local -r dest=$DIR/$bin

    if ! bash --norc --noprofile -n "$tmp" 2>"$STDERR"; then
        failed "$bin" "did not produce a valid shell script"
        return
    fi

    if diff --new-file "$dest" "$tmp" > "$DIFF"; then
        UNCHANGED+=("$bin")
    else
        mv "$tmp" "$dest"
        UPDATED+=("$bin")
    fi
}

fetch-url() {
    local -r bin=$1
    local -r url=$2

    local f
    f=$(cache-get "$url" "bash-completion-${bin}" 2>"$STDERR" || true)

    if [[ -n ${f:-} ]]; then
        cat "$f"

    else
        failed "$bin" "URL download failed"
    fi
}

create-bash-function() {
    local -r bin=$1
    shift
    local fn="__complete_${bin//-/_}"
    local cmd="$*"

cat << EOF
${fn}() {
    local cur=\${COMP_WORDS[\$COMP_CWORD]}
    mapfile -t COMPREPLY < <(compgen -W "\$(${cmd})" -- "\$cur")
}
complete -F ${fn} ${bin}
EOF
}

generate-alt() {
    local -r bin=$1
    shift || true

    should-generate "$bin" || return 0

    : >"$STDERR"

    local -r tmp=$TMP/$bin

    if "$@" > "$tmp" 2>"$STDERR"; then
        update "$bin"

    else
        failed "$bin" "command ($*) failed"
    fi
}

generate() {
    generate-alt "$1" "$@"
}

download() {
    local -r bin=$1
    local -r url=$2

    generate-alt "$bin" fetch-url "$bin" "$url"
}

candidate-list-command() {
    local -r bin=$1
    shift
    generate-alt "$bin" create-bash-function "$bin" "$@"
}

echo "Updating bash completion scripts"

generate pip completion --bash
generate pip3 completion --bash
generate hugo completion bash
generate openstack complete --shell bash
generate kubectl completion bash
generate luarocks completion bash
generate gh completion --shell bash # github cli
generate op completion bash         # 1password
generate ineed _bash_completion
generate rustup completions bash rustup
generate gitsign completion bash
generate deck completion bash
generate gh-helper generate-bash-completion
# https://github.com/rust-lang/rust-bindgen/issues/3037
# https://github.com/rust-lang/rust-bindgen/pull/3040
generate bindgen --generate-shell-completions bash DUMMY_HEADER_FILE_ARG
generate wasmtime completion bash
generate tree-sitter complete --shell bash
generate varlink completions bash
generate bat --completion bash
generate minijinja-cli --generate-completion bash
generate mise completion bash
generate usage --completions bash

generate-alt cargo rustup completions bash cargo
generate-alt bazel ~/.local/libexec/download-bazel-bash-completion

download busted "https://raw.githubusercontent.com/Olivine-Labs/busted/master/completions/bash/busted.bash"

LIST_PACKAGE_NAMES=(ls-packages --name-only)
candidate-list-command files-in-package "${LIST_PACKAGE_NAMES[@]}"
candidate-list-command package-info "${LIST_PACKAGE_NAMES[@]}"
candidate-list-command package-deps "${LIST_PACKAGE_NAMES[@]}"
