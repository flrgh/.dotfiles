[tools]
node = "latest"
go = "latest"
zig = "latest"
python = "latest"

1password-cli = "latest"
ast-grep = "latest"
aws-cli = "latest"
bazelisk = "latest"
bat = "latest"
bitwarden = "latest"
cargo-binstall = "latest"
direnv = "latest"
fd = "latest"
fzf = "latest"
gh = "latest"
git-cliff = "latest"
jq = "latest"
marksman = "latest"
ninja = "latest"
ripgrep = "latest"
shellcheck = "latest"
shfmt = "latest"
terraform-ls = "latest"
tree-sitter = "latest"
uv = "latest"
yq = "latest"
zls = "0.14.0" # 0.15 is broken
vivid = "latest"

[settings]
# everything but aqua is disabled until I actually need something from
# another backend
disable_backends = [
    # "aqua",
    "asdf",
    "cargo",
    "core",
    "dotnet",
    "gem",
    "npm",
    "pipx",
    "spm",
    "ubi",
    "vfox",
]
paranoid = true

[settings.cargo]
binstall = true

[settings.pipx]
uvx = true

[settings.aqua]
# enable all the security things
slsa = true
cosign = true
minisign = true

[settings.node]
gpg_verify = true


# # mise config files are hierarchical. mise will find all of the config files
# # in all parent directories and merge them together.
# # You might have a structure like:
#
# * ~/work/project/mise.toml   # a config file for a specific work project
# * ~/work/mise.toml           # a config file for projects related to work
# * ~/.config/mise/config.toml # the global config file
# * /etc/mise/config.toml      # the system config file
#
# # This setup allows you to define default versions and configuration across
# # all projects but override them for specific projects.
#
# # set arbitrary env vars to be used whenever in this project or subprojects
# [env]
# NODE_ENV = "development"
# NPM_CONFIG_PREFIX = "~/.npm-global"
# EDITOR = "code --wait"
#
# mise.file = ".env"                # load vars from a dotenv file
# mise.path = "./node_modules/.bin" # add a directory to PATH
#
# [tools]
# terraform = '1.0.0'       # specify a single version
# erlang = '26'             # specify a major version only
# node = 'ref:master'       # build from a git ref
# node = 'path:~/.nodes/14' # BYO â€“ specify a non-mise managed installation
#
# # newest with this prefix (typically exact matches don't use the prefix)
# go = 'prefix:1.16'
#
# # multiple versions will all go into PATH in the order specified
# # this is helpful for making `python311` and `python310` available
# # even when `python` and `python3` point to a different version
# python = ['3.12', '3.11', '3.10']
#
# # some plugins can take options like python's virtualenv activation
# # with these, mise will automatically setup and activate vevs when entering
# # the project directory
# python = {version='3.12', virtualenv='.venv'}
# poetry = {version='1.7.1', pyproject='pyproject.toml'}
#
# [plugins]
# # specify a custom repo url so you can install with `mise plugin add <name>`
# # note this will only be used if the plugin is not already installed
# python = 'https://github.com/asdf-community/asdf-python'
#
# [alias.node.versions]
# # setup a custom alias so you can run `mise use -g node@work` for node-16.x
# work = '16'

