1,26c1
< ### key-bindings.bash ###
< #     ____      ____
< #    / __/___  / __/
< #   / /_/_  / / /_
< #  / __/ / /_/ __/
< # /_/   /___/_/ key-bindings.bash
< #
< # - $FZF_TMUX_OPTS
< # - $FZF_CTRL_T_COMMAND
< # - $FZF_CTRL_T_OPTS
< # - $FZF_CTRL_R_OPTS
< # - $FZF_ALT_C_COMMAND
< # - $FZF_ALT_C_OPTS
< 
< if [[ $- =~ i ]]; then
< 
< 
< # Key bindings
< # ------------
< 
< #----BEGIN INCLUDE common.sh
< # NOTE: Do not directly edit this section, which is copied from "common.sh".
< # To modify it, one can edit "common.sh" and run "./update-common.sh" to apply
< # the changes. See code comments in "common.sh" for the implementation details.
< 
< __fzf_defaults() {
---
>  __fzf_defaults() {
28d2
<   command cat "${FZF_DEFAULT_OPTS_FILE-}" 2> /dev/null
32,46d5
< __fzf_exec_awk() {
<   if [[ -z ${__fzf_awk-} ]]; then
<     __fzf_awk=awk
<     if [[ $OSTYPE == solaris* && -x /usr/xpg4/bin/awk ]]; then
<       __fzf_awk=/usr/xpg4/bin/awk
<     elif command -v mawk >/dev/null 2>&1; then
<       local n x y z d
<       IFS=' .' read -r n x y z d <<< $(command mawk -W version 2> /dev/null)
<       [[ $n == mawk ]] && (( d >= 20230302 && (x * 1000 + y) * 1000 + z >= 1003004 )) && __fzf_awk=mawk
<     fi
<   fi
<   LC_ALL=C exec "$__fzf_awk" "$@"
< }
< #----END INCLUDE
< 
50c9
<   FZF_DEFAULT_OPTS_FILE='' $(__fzfcmd) "$@" |
---
>   FZF_DEFAULT_OPTS_FILE='' fzf "$@" |
56,60d14
< __fzfcmd() {
<   [[ -n "${TMUX_PANE-}" ]] && { [[ "${FZF_TMUX:-0}" != 0 ]] || [[ -n "${FZF_TMUX_OPTS-}" ]]; } &&
<     echo "fzf-tmux ${FZF_TMUX_OPTS:--d${FZF_TMUX_HEIGHT:-40%}} -- " || echo "fzf"
< }
< 
67,74c21,54
< __fzf_cd__() {
<   local dir
<   dir=$(
<     FZF_DEFAULT_COMMAND=${FZF_ALT_C_COMMAND:-} \
<     FZF_DEFAULT_OPTS=$(__fzf_defaults "--reverse --walker=dir,follow,hidden --scheme=path" "${FZF_ALT_C_OPTS-} +m") \
<     FZF_DEFAULT_OPTS_FILE='' $(__fzfcmd)
<   ) && printf 'builtin cd -- %q' "$(builtin unset CDPATH && builtin cd -- "$dir" && builtin pwd)"
< }
---
> __fzf_lua_history='
> local io = io
> local stdin = io.stdin
> local stdout = io.stdout
> local write = io.stdout.write
> 
> local fmt = string.format
> local byte = string.byte
> local sub = string.sub
> 
> local TAB = byte("\t")
> 
> local seen = {}
> local N = 0
> 
> for line in stdin:lines() do
>   if not line then
>     break
>   end
> 
>   if byte(line, 1) == TAB then
>     line = sub(line, 3)
>     N = N + 1
> 
>     if not seen[line] then
>       seen[line] = true
>       write(stdout, fmt("%d\t%s\0", BR - N, line))
>     end
>   end
> end
> '
> __fzf_history__() {
>     [[ $(HISTTIMEFORMAT='' builtin history 1) =~ [[:digit:]]+ ]] # how many history entries
>     local -i n=$((BASH_REMATCH + 1))
76,79c56
< if command -v perl > /dev/null; then
<   __fzf_history__() {
<     local output script
<     script='BEGIN { getc; $/ = "\n\t"; $HISTCOUNT = $ENV{last_hist} + 1 } s/^[ *]//; s/\n/\n\t/gm; print $HISTCOUNT - $. . "\t$_" if !$seen{$_}++'
---
>     local output
82,117c59,80
<       builtin fc -lnr -2147483648 |
<         last_hist=$(HISTTIMEFORMAT='' builtin history 1) command perl -n -l0 -e "$script" |
<         FZF_DEFAULT_OPTS=$(__fzf_defaults "" "-n2..,.. --scheme=history --bind=ctrl-r:toggle-sort --wrap-sign '"$'\t'"↳ ' --highlight-line ${FZF_CTRL_R_OPTS-} +m --read0") \
<         FZF_DEFAULT_OPTS_FILE='' $(__fzfcmd) --query "$READLINE_LINE"
<     ) || return
<     READLINE_LINE=$(command perl -pe 's/^\d*\t//' <<< "$output")
<     if [[ -z "$READLINE_POINT" ]]; then
<       echo "$READLINE_LINE"
<     else
<       READLINE_POINT=0x7fffffff
<     fi
<   }
< else # awk - fallback for POSIX systems
<   __fzf_history__() {
<     local output script
<     [[ $(HISTTIMEFORMAT='' builtin history 1) =~ [[:digit:]]+ ]]    # how many history entries
<     script='function P(b) { ++n; sub(/^[ *]/, "", b); if (!seen[b]++) { printf "%d\t%s%c", '$((BASH_REMATCH + 1))' - n, b, 0 } }
<     NR==1 { b = substr($0, 2); next }
<     /^\t/ { P(b); b = substr($0, 2); next }
<     { b = b RS $0 }
<     END { if (NR) P(b) }'
<     output=$(
<       set +o pipefail
<       builtin fc -lnr -2147483648 2> /dev/null |   # ( $'\t '<lines>$'\n' )* ; <lines> ::= [^\n]* ( $'\n'<lines> )*
<         __fzf_exec_awk "$script"               |   # ( <counter>$'\t'<lines>$'\000' )*
<         FZF_DEFAULT_OPTS=$(__fzf_defaults "" "-n2..,.. --scheme=history --bind=ctrl-r:toggle-sort --wrap-sign '"$'\t'"↳ ' --highlight-line ${FZF_CTRL_R_OPTS-} +m --read0") \
<         FZF_DEFAULT_OPTS_FILE='' $(__fzfcmd) --query "$READLINE_LINE"
<     ) || return
<     READLINE_LINE=${output#*$'\t'}
<     if [[ -z "$READLINE_POINT" ]]; then
<       echo "$READLINE_LINE"
<     else
<       READLINE_POINT=0x7fffffff
<     fi
<   }
< fi
---
>       builtin fc -lnr -2147483648 2>/dev/null \
>       | # ( $'\t '<lines>$'\n' )* ; <lines> ::= [^\n]* ( $'\n'<lines> )*
>         LUA_INIT='' \
>         command luajit \
>         -e 'BR = assert(tonumber('$n'))' \
>         -e "$__fzf_lua_history" \
>       | # ( <counter>$'\t'<lines>$'\000' )*
>         FZF_DEFAULT_OPTS=$(__fzf_defaults \
>                          "" \
>                          "-n2..,.. --scheme=history --bind=ctrl-r:toggle-sort --wrap-sign '"$'\t'"↳ ' --highlight-line ${FZF_CTRL_R_OPTS-} +m --read0"
>         ) \
>         FZF_DEFAULT_OPTS_FILE='' \
>         fzf --query "$READLINE_LINE"
>       ) || return
>       READLINE_LINE=${output#*$'\t'}
>       if [[ -z $READLINE_POINT ]]; then
>         echo "$READLINE_LINE"
>       else
>         READLINE_POINT=0x7fffffff
>       fi
>     }
> 
126,149c89,93
< if (( BASH_VERSINFO[0] < 4 )); then
<   # CTRL-T - Paste the selected file path into the command line
<   if [[ "${FZF_CTRL_T_COMMAND-x}" != "" ]]; then
<     bind -m emacs-standard '"\C-t": " \C-b\C-k \C-u`__fzf_select__`\e\C-e\er\C-a\C-y\C-h\C-e\e \C-y\ey\C-x\C-x\C-f"'
<     bind -m vi-command '"\C-t": "\C-z\C-t\C-z"'
<     bind -m vi-insert '"\C-t": "\C-z\C-t\C-z"'
<   fi
< 
<   # CTRL-R - Paste the selected command from history into the command line
<   bind -m emacs-standard '"\C-r": "\C-e \C-u\C-y\ey\C-u`__fzf_history__`\e\C-e\er"'
<   bind -m vi-command '"\C-r": "\C-z\C-r\C-z"'
<   bind -m vi-insert '"\C-r": "\C-z\C-r\C-z"'
< else
<   # CTRL-T - Paste the selected file path into the command line
<   if [[ "${FZF_CTRL_T_COMMAND-x}" != "" ]]; then
<     bind -m emacs-standard -x '"\C-t": fzf-file-widget'
<     bind -m vi-command -x '"\C-t": fzf-file-widget'
<     bind -m vi-insert -x '"\C-t": fzf-file-widget'
<   fi
< 
<   # CTRL-R - Paste the selected command from history into the command line
<   bind -m emacs-standard -x '"\C-r": __fzf_history__'
<   bind -m vi-command -x '"\C-r": __fzf_history__'
<   bind -m vi-insert -x '"\C-r": __fzf_history__'
---
> # CTRL-T - Paste the selected file path into the command line
> if [[ "${FZF_CTRL_T_COMMAND-x}" != "" ]]; then
> bind -m emacs-standard -x '"\C-t": fzf-file-widget'
> bind -m vi-command -x '"\C-t": fzf-file-widget'
> bind -m vi-insert -x '"\C-t": fzf-file-widget'
152,160c96,99
< # ALT-C - cd into the selected directory
< if [[ "${FZF_ALT_C_COMMAND-x}" != "" ]]; then
<   bind -m emacs-standard '"\ec": " \C-b\C-k \C-u`__fzf_cd__`\e\C-e\er\C-m\C-y\C-h\e \C-y\ey\C-x\C-x\C-d"'
<   bind -m vi-command '"\ec": "\C-z\ec\C-z"'
<   bind -m vi-insert '"\ec": "\C-z\ec\C-z"'
< fi
< 
< fi
< ### end: key-bindings.bash ###
---
> # CTRL-R - Paste the selected command from history into the command line
> bind -m emacs-standard -x '"\C-r": __fzf_history__'
> bind -m vi-command -x '"\C-r": __fzf_history__'
> bind -m vi-insert -x '"\C-r": __fzf_history__'
