#!/usr/bin/env python3

from pathlib import Path
from os import path, walk, getlogin, getenv

DEFAULT_INSTALL_PATH = Path(path.expanduser("~"))
REPO_ROOT = Path(path.dirname(path.dirname(path.realpath(__file__))))
DELETE_MARKER = '.DELETE'
SKIP = object()


def list_tree(tree):
    for root, _, files in walk(tree):
        for f in files:
            yield Path(path.join(root, f))


def is_deleted(fname):
    return fname.resolve().name == DELETE_MARKER


def already_linked(target, link):
    if not target.exists() and not is_deleted(target):
        raise IOError(f"Target {target} does not exist!")

    if link.exists() and not link.is_symlink():
        raise IOError(f"Link path ({link}) already exists but is not a symlink")

    return link.resolve() == target.resolve()


def symlink(target, link, isdir=False):
    if already_linked(target, link):
        if is_deleted(target):
            print(f"Unlinking deleted: {link}")
            link.unlink(missing_ok=True)
        return
    elif is_deleted(target):
        return

    print(f"Symlink {link} -> {target}")

    if link.exists() and link.is_symlink():
        link.unlink()

    link.parent.mkdir(parents=True, exist_ok=True)
    link.symlink_to(target, target_is_directory=isdir)


def files_d(path):
    dirname = Path(REPO_ROOT / 'home')
    for filename in list_tree(dirname):
        link = path  / filename.relative_to(dirname)
        symlink(filename, link)



def mine(path):
    return path.owner() == getlogin()


def ignore_dir(path):
    if not path.is_dir():
        return False

    strpath = str(path).lower().rstrip('/')

    suffixes = [
        '/node_modules',
        '/go/pkg/mod',
        '/cache',
        '/site-packages',
        '/flatpak/repo',
        '/flatpak/runtime',
        '/flatpak/app',
        '/webkitgtk',
        '/dist',
    ]

    for s in suffixes:
        if strpath.endswith(s):
            return True

    if (path / '.git').exists():
        return True

    return False


def non_repo_target(path):
    return not str(path.resolve()).startswith(str(REPO_ROOT))


def target_exists(path):
    return path.resolve().exists()


def main():
    install_path = getenv("INSTALL_PATH") or DEFAULT_INSTALL_PATH
    files_d(install_path)


if __name__ == "__main__":
    main()
