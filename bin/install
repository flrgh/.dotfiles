#!/usr/bin/env python3

from pathlib import Path
from os import path, walk, getlogin

import argparse
import subprocess as sp
import sys

INSTALL_PATH = Path(path.expanduser("~"))
REPO_ROOT = Path(path.dirname(path.dirname(path.realpath(__file__))))

DELETE_MARKER = '.DELETE'

def list_tree(tree):
    for root, dirs, files in walk(tree):
        for f in files:
            yield Path(path.join(root, f))

def is_deleted(fname):
    return fname.resolve().name == DELETE_MARKER

def already_linked(target, link):
    if not target.exists() and not is_deleted(target):
        raise IOError(f"Target {target} does not exist!")

    if link.exists() and not link.is_symlink():
        raise IOError(f"Link path ({link}) already exists but is not a symlink")

    return link.resolve() == target.resolve()

def symlink(target, link, isdir=False):
    if already_linked(target, link):
        if is_deleted(target):
            print(f"Unlinking deleted: {link}")
            link.unlink(missing_ok=True)
        return
    elif is_deleted(target):
        return

    print(f"Symlink {link} -> {target}")

    if link.exists() and link.is_symlink():
        link.unlink()

    link.parent.mkdir(parents=True, exist_ok=True)
    link.symlink_to(target, target_is_directory=isdir)


def files_d(path):
    dirname = Path(REPO_ROOT / 'files.d')
    for filename in list_tree(dirname):
        link = path  / filename.relative_to(dirname)
        symlink(filename, link)


def dirs_d(path):
    dirs = Path(REPO_ROOT / 'dirs.d')
    for directory in dirs.iterdir():
        link = path  / directory.relative_to(dirs)
        symlink(directory, link, isdir=True)


def delete_link(path):
    if not path.is_symlink():
        return None

    print(f'deleting symlink orphan: {path}')
    path.unlink()

SKIP = object()

def walk_path(path, cb):
    if not path.is_dir():
        return cb(path)

    if cb(path) == SKIP:
        return SKIP

    for child in path.iterdir():
        walk_path(child, cb)

def mine(path):
    return path.owner() == getlogin()

def ignore_dir(path):
    if not path.is_dir():
        return False

    strpath = str(path).lower().rstrip('/')

    suffixes = [
        '/node_modules',
        '/go/pkg/mod',
        '/cache',
        '/site-packages',
        '/flatpak/repo',
        '/flatpak/runtime',
        '/flatpak/app',
        '/webkitgtk',
        '/dist',
    ]

    for s in suffixes:
        if strpath.endswith(s):
            return True

    if (path / '.git').exists():
        return True

    return False

def non_repo_target(path):
    return not str(path.resolve()).startswith(str(REPO_ROOT))

def target_exists(path):
    return path.resolve().exists()

def cleanup(path):
    if path.is_dir():
        if not mine(path):
            return SKIP

        if ignore_dir(path):
            return SKIP

        return None

    if not path.is_symlink():
        return SKIP

    if non_repo_target(path):
        return SKIP

    if target_exists(path):
        return SKIP

    delete_link(path)
    return None

def cleanup_links(path):
    walk_path(path / '.local', cleanup)
    walk_path(path / '.config', cleanup)

def print_lines(label, lines):
    for line in lines:
        line = line.strip("\n").strip()
        if line == "":
            continue
        print(f"{label} => {line}")


def runit(hook, path):
    print(f"running hook => {hook.name} ", end="", flush=True)
    proc = sp.Popen(
        [hook, REPO_ROOT, path],
        cwd    = REPO_ROOT,
        stdin  = sp.DEVNULL,
        stdout = sp.PIPE,
        stderr = sp.PIPE
    )

    stdout = []
    stderr = []

    while True:
        print(".", end="", flush=True)

        try:
            out, err = proc.communicate(timeout=0.1)
            stdout.append(out.decode("utf-8"))
            stderr.append(err.decode("utf-8"))
            proc.wait(0.1)
            break

        except sp.TimeoutExpired as e:
            continue

    if proc.returncode == 0:
        print(" OK", flush=True)
    else:
        print(" FAIL", flush=True)
        print_lines("stdout", stdout)
        print_lines("stderr", stderr)


def run_hooks(hooks, path):
    hookdir = REPO_ROOT / "hooks"/ hooks
    for hook in hookdir.iterdir():
        runit(hook, path)


def main():
    parser = argparse.ArgumentParser(
        usage='%(prog)s [OPTIONS]'
    )

    parser.add_argument(
        '-l', '--link-only',
        dest='link_only',
        action='store_true',
        default=False,
        help='Only setup symlinks (after running pre-hooks)',
    )

    parser.add_argument(
        'install_path',
        nargs='?',
        type=Path,
        default=path.expanduser("~"),
        help='Where to install things',
    )

    args = parser.parse_args()

    install_path = args.install_path

    run_hooks("pre", install_path)

    cleanup_links(install_path)
    files_d(install_path)
    dirs_d(install_path)

    if not args.link_only:
        run_hooks("post", install_path)

if __name__ == "__main__":
    main()
