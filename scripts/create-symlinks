#!/usr/bin/env python3

from pathlib import Path
from os import path, walk, getenv

DEFAULT_INSTALL_PATH = Path(path.expanduser("~"))
REPO_ROOT = Path(getenv("DOTFILES_REPO_ROOT"))
DELETE_MARKER = '.DELETE'
SKIP = object()


def list_tree(tree):
    for root, _, files in walk(tree):
        for f in files:
            yield Path(path.join(root, f))


def is_deleted(fname: Path):
    return fname.resolve(strict=False).name == DELETE_MARKER

def target_exists(path: Path):
    return path.resolve().exists()


def already_linked(target: Path, link: Path):
    if not target.exists() and not is_deleted(target):
        raise IOError(f"Target {target} does not exist!")

    if link.exists() and not link.is_symlink():
        raise IOError(f"Link path ({link}) already exists but is not a symlink")

    if not link.resolve().exists():
        return False

    return link.readlink() == target.resolve()


def symlink(target: Path, link: Path):
    if already_linked(target, link):
        if is_deleted(target):
            print(f"Unlinking deleted: {link}")
            link.unlink(missing_ok=True)
        return
    elif is_deleted(target):
        return

    target = target.resolve(strict=True)

    print(f"Symlink {link} -> {target}")

    if link.exists() and link.is_symlink():
        link.unlink()

    link.parent.mkdir(parents=True, exist_ok=True)
    link.symlink_to(target, target_is_directory=False)


def homedir(path: Path):
    dirname = Path(REPO_ROOT / 'home')
    for filename in list_tree(dirname):
        link = path  / filename.relative_to(dirname)
        symlink(filename, link)


def nvim(path: Path):
    path = path / Path('.config/nvim')
    dirname = Path(REPO_ROOT / 'nvim')
    for filename in list_tree(dirname):
        link = path  / filename.relative_to(dirname)
        symlink(filename, link)


def main():
    install_path = Path(getenv("DOTFILES_INSTALL_PATH") or DEFAULT_INSTALL_PATH)
    homedir(install_path)
    nvim(install_path)


if __name__ == "__main__":
    main()
